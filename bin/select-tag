#!/usr/bin/env bash
set -euo pipefail

# Select a tagged release for this repo and check it out.
# Runs as an unprivileged user; apply config separately with: sudo ./bin/apply
#
# Usage:
#   ./bin/select-tag v1.2.3
#   ./bin/select-tag --latest
#
# Env:
#   ALLOW_DIRTY=1  to proceed even if working tree is dirty (not recommended)

REPO_DIR="/opt/airplay_wyse"
log() { echo "$(date --iso-8601=seconds) [select-tag] $*"; }
die() { echo "[select-tag] ERROR: $*" >&2; exit 1; }

cd "$REPO_DIR" 2>/dev/null || die "repo not found at $REPO_DIR"

require_clean() {
  if [[ "${ALLOW_DIRTY:-0}" != "1" ]]; then
    if ! git diff --quiet || ! git diff --cached --quiet; then
      die "working tree is dirty; commit/stash or set ALLOW_DIRTY=1"
    fi
  fi
}

semver_latest() {
  git tag --list 'v*' \
    | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' \
    | sed -E 's/^v//' \
    | sort -t. -k1,1n -k2,2n -k3,3n \
    | tail -n1 \
    | awk '{print "v"$0}'
}

usage() {
  grep -E '^# ' "$0" | sed 's/^# \{0,1\}//'
}

main() {
  local target=""
  if [[ $# -eq 0 ]]; then
    usage; exit 1
  fi
  if [[ "$1" == "--latest" ]]; then
    log "fetching tags"
    GIT_TERMINAL_PROMPT=0 git fetch --tags --force --prune --prune-tags
    target=$(semver_latest)
    [[ -n "$target" ]] || die "no semver tags found"
  else
    target="$1"
  fi

  [[ "$target" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] || die "invalid tag format: $target"

  log "fetching tags"
  GIT_TERMINAL_PROMPT=0 git fetch --tags --force --prune --prune-tags
  git show-ref --verify --quiet "refs/tags/$target" || die "tag not found: $target"

  require_clean
  log "checking out tags/$target"
  git checkout -f "tags/$target"
  log "done. Now run: sudo ./bin/apply"
}

main "$@"

