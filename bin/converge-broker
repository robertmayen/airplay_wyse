#!/usr/bin/env bash
set -euo pipefail

QUEUE=/run/airplay/queue
LOG_TAG=airplay-broker

log() { systemd-cat -t "$LOG_TAG" echo "$*"; }

is_allowed() {
  # enforce absolute binaries and minimal patterns
  case "$1" in
    /usr/bin/apt-get)
      shift
      # allow either `apt-get update` or `apt-get -y install ...`
      if [ "${1:-}" = "update" ]; then return 0; fi
      [ "${1:-}" = "-y" ] && [ "${2:-}" = "install" ] && return 0 || true
      ;;
    /usr/bin/dpkg)
      shift
      [ "${1:-}" = "-i" ] && [[ "${2:-}" == /opt/airplay_wyse/pkg/*.deb ]] && return 0 || true
      ;;
    /usr/bin/systemctl)
      shift
      # allow only restarts of our stack
      if [ "${1:-}" = "daemon-reload" ]; then return 0; fi
      if [ "${1:-}" = "set-property" ] && [ "${2:-}" = "converge-broker.service" ]; then return 0; fi
      if [ "${1:-}" = "restart" ]; then
        case "${2:-}" in
          airplay-*) return 0 ;;
          converge-broker.path) return 0 ;;
          converge-broker.service) return 0 ;;
        esac
      fi
      return 1
      ;;
    /usr/bin/install)
      shift
      # allow creation of apt preferences dir and runtime drop-in dir for broker overrides
      if [ "${1:-}" = "-d" ] && [ "${2:-}" = "-m" ] && [ "${3:-}" = "0755" ]; then
        case "${4:-}" in
          /etc/apt/preferences.d) return 0 ;;
          /run/systemd/system/converge-broker.service.d) return 0 ;;
        esac
      fi
      return 1
      ;;
    /usr/bin/tee)
      shift
      # allow writing to apt preferences and specific systemd unit files
      case "${1:-}" in
        /etc/apt/preferences.d/*.pref) return 0 ;;
        /run/systemd/system/converge-broker.service.d/*.conf) return 0 ;;
        /etc/systemd/system/converge-broker.service) return 0 ;;
        /etc/systemd/system/converge-broker.path) return 0 ;;
        /etc/systemd/system/converge.service) return 0 ;;
        /etc/systemd/system/update.service) return 0 ;;
        /etc/systemd/system/update-done.path) return 0 ;;
        /etc/systemd/system/preflight.service) return 0 ;;
      esac
      return 1
      ;;
  esac
  return 1
}

process_one() {
  local f="$1"; local okf="${f%.cmd}.ok"; local errf="${f%.cmd}.err"
  local inf="${f%.cmd}.in"
  local line; line="$(cat "$f")"
  # shellcheck disable=SC2206
  args=( $line )
  if is_allowed "${args[@]}"; then :; else echo "DENY: $line" >"$errf"; rm -f "$f"; return 0; fi
  if [[ "${args[0]}" == "/usr/bin/tee" && -f "$inf" ]]; then
    if "${args[@]}" <"$inf" 2> >(tee "$errf".tmp >&2); then
      : > "$okf"; rm -f "$errf".tmp "$inf"
    else
      mv "$errf".tmp "$errf"
    fi
    rm -f "$f"; return 0
  fi
  if "${args[@]}" 2> >(tee "$errf".tmp >&2); then
    : > "$okf"
    rm -f "$errf".tmp
  else
    mv "$errf".tmp "$errf"
  fi
  rm -f "$f"
}

run_pending() {
  shopt -s nullglob
  for f in "$QUEUE"/*.cmd; do process_one "$f"; done
}

run_pending
