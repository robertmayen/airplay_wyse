#!/usr/bin/env bash
set -euo pipefail

# Apply configuration changes (name/ALSA[/mixer]/interface) for AirPlay Wyse.
# This writes /etc/shairport-sync.conf from the minimal template and restarts shairport-sync.

# Resolve repo dir relative to this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
TEMPLATE_MIN="$REPO_DIR/cfg/shairport-sync.minimal.conf.tmpl"
TARGET_CONF="/etc/shairport-sync.conf"
LIB_SH="$REPO_DIR/bin/lib.sh"
DEFAULTS_FILE=${DEFAULTS_FILE:-/etc/default/airplay_wyse}

log() { echo "$(ts) [apply] $*"; }
die() { echo "[apply] ERROR: $*" >&2; exit 1; }

require_root() { [[ "$(id -u)" -eq 0 ]] || die "must be run as root"; }

usage() {
  cat <<EOF
Usage: sudo ./bin/apply [--name NAME] [--device ALSA_DEV] [--mixer MIXER] [--interface IFACE]

Examples:
  sudo ./bin/apply --name "Living Room"
  sudo ./bin/apply --device hw:0,0 --mixer PCM
  sudo ./bin/apply --interface wlp0s12f0
EOF
}

render_conf() { render_shairport_conf "$TEMPLATE_MIN" "$TARGET_CONF" "$@"; }

main() {
  require_root
  # shellcheck disable=SC1091
  [[ -f "$LIB_SH" ]] && source "$LIB_SH" || die "missing lib: $LIB_SH"
  # shellcheck disable=SC1091
  [[ -f "$DEFAULTS_FILE" ]] && source "$DEFAULTS_FILE" || true

  local name device mixer iface hwaddr primary_if mac
  name="${AIRPLAY_NAME:-}"
  device="${ALSA_DEVICE:-}"
  mixer="${ALSA_MIXER:-}"
  iface="${AVAHI_IFACE:-}"
  hwaddr="${HW_ADDR:-}"

  # Parse flags
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --name) shift; name="${1:-}" ;;
      --device) shift; device="${1:-}" ;;
      --mixer) shift; mixer="${1:-}" ;;
      --interface|--iface) shift; iface="${1:-}" ;;
      -h|--help) usage; exit 0 ;;
      *) die "unknown argument: $1" ;;
    esac
    shift || true
  done

  # Resolve defaults
  primary_if="${iface:-$(primary_iface || true)}"
  mac="${hwaddr:-$(derive_hwaddr_from_iface "$primary_if" || true)}"
  if [[ -z "$name" ]]; then name="$(default_airplay_name "$mac")"; fi
  if [[ -z "$device" ]]; then
    if [[ -x "$REPO_DIR/bin/alsa-probe" ]]; then
      device="$($REPO_DIR/bin/alsa-probe || true)"; device="${device:-hw:0,0}"
    else
      device="hw:0,0"
    fi
  fi
  # Self-heal identity if this looks like a cloned image
  maybe_reset_identity "$mac"

  log "writing $TARGET_CONF (name='$name', device='$device')"
  # identity-ensure manages interface and hardware_address at boot
  # Enable statistics if AIRPLAY_WYSE_DEBUG is set
  stats=""
  if [[ "${AIRPLAY_WYSE_DEBUG:-0}" == "1" ]]; then stats="yes"; fi
  render_conf "$name" "$device" "${mixer:-}" "" "" "" "${stats:-}"

  # Ensure identity fields are present immediately (not just on next boot)
  if [[ -x "/usr/local/libexec/airplay_wyse/identity-ensure" ]]; then
    /usr/local/libexec/airplay_wyse/identity-ensure || die "identity-ensure failed; refusing to restart shairport-sync"
  fi

  log "restarting shairport-sync"
  systemctl restart shairport-sync.service

  log "done"
}

main "$@"
