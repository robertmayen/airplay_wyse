#!/usr/bin/env bash
set -euo pipefail

STATE_DIR="/var/lib/airplay_wyse"
LAST_UPDATE_FILE="$STATE_DIR/last-update.txt"
REPO_DIR="/opt/airplay_wyse"

log() { printf '%s %s\n' "$(date -u +%Y-%m-%dT%H:%M:%SZ)" "$*"; }

write_last_update() {
  local ts target rc
  ts=$(date -u +%Y-%m-%dT%H:%M:%SZ)
  target=${1:-}
  rc=${2:-1}
  mkdir -p "$STATE_DIR" 2>/dev/null || true
  {
    echo "ts=$ts"
    echo "target=$target"
    echo "rc=$rc"
  } >"$LAST_UPDATE_FILE" 2>/dev/null || true
}

yaml_get_target_tag() {
  local file=$1
  awk -F: '/^target_tag\s*:/ {val=$2; sub(/^[[:space:]]+/,"",val); sub(/[[:space:]]+$/,"",val); gsub(/^"|"$/,"",val); gsub(/^\'"'"'|\'"'"'$/,"",val); print val; exit}' "$file" 2>/dev/null || true
}

highest_semver_tag() {
  git tag -l 'v[0-9]*.[0-9]*.[0-9]*' | \
    grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | \
    sort -V | tail -n1
}

current_commit_matches_tag() {
  local tag=$1
  local head tgt
  head=$(git rev-parse HEAD)
  tgt=$(git rev-list -n1 "$tag")
  [[ "$head" == "$tgt" ]]
}

short_host() { hostname -s 2>/dev/null || hostname; }

main() {
  local rc=1 target_tag=""

  # Ensure correct user
  if [[ "$(id -un)" != "airplay" ]]; then
    echo "This script must run as user 'airplay'" >&2
    write_last_update "" 1
    exit 1
  fi

  cd "$REPO_DIR"
  log "Updater starting in $PWD"

  log "Fetching tags from origin"
  git fetch --tags origin

  # Prefer per-host inventory target_tag
  local inv="$REPO_DIR/inventory/hosts/$(short_host).yml"
  if [[ -f "$inv" ]]; then
    target_tag=$(yaml_get_target_tag "$inv" || true)
  fi
  if [[ -z "${target_tag:-}" ]]; then
    target_tag=$(highest_semver_tag || true)
  fi
  if [[ -z "${target_tag:-}" ]]; then
    log "No target tag determined (no target_tag and no SemVer tags)"
    write_last_update "" 1
    exit 1
  fi
  log "Target tag: $target_tag"

  if ! git verify-tag "$target_tag"; then
    log "git verify-tag failed for $target_tag"
    write_last_update "$target_tag" 1
    exit 1
  fi

  if current_commit_matches_tag "$target_tag"; then
    log "Already at $target_tag"
  else
    log "Checking out tags/$target_tag"
    git checkout -f "tags/$target_tag"
  fi

  log "Starting converge.service"
  systemctl start converge.service

  write_last_update "$target_tag" 0
  log "Updater completed"
}

trap 'rc=$?; if [[ $rc -ne 0 ]]; then log "Updater failed rc=$rc"; fi; exit $rc' EXIT
main "$@"
