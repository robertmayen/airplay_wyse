#!/usr/bin/env bash
set -euo pipefail

STATE_DIR="/var/lib/airplay_wyse"
LAST_UPDATE_FILE="$STATE_DIR/last-update.txt"
REPO_DIR="/opt/airplay_wyse"

log() { printf '%s %s\n' "$(date -u +%Y-%m-%dT%H:%M:%SZ)" "$*"; }
SUPPRESS_TRAP_LOG=0

write_last_update() {
  local ts target rc
  ts=$(date -u +%Y-%m-%dT%H:%M:%SZ)
  target=${1:-}
  rc=${2:-1}
  mkdir -p "$STATE_DIR" 2>/dev/null || true
  {
    echo "ts=$ts"
    echo "target=$target"
    echo "rc=$rc"
  } >"$LAST_UPDATE_FILE" 2>/dev/null || true
}

sync_systemd_units() { :; }

# --- Bootstrap helpers (sudoers + wrapper) ---
can_systemd_run_nopass() {
  # Test whether current context can run systemd-run without password
  if ! command -v sudo >/dev/null 2>&1; then
    return 1
  fi
  # Non-interactive sudo test
  sudo -n /usr/bin/systemd-run --version >/dev/null 2>&1
}

has_wrapper() {
  [[ -x /usr/local/sbin/airplay-sd-run ]]
}

# Return 0 if bootstrap is needed, 1 if already configured
bootstrap_needed() {
  local need=0
  if ! can_systemd_run_nopass; then
    need=1
  fi
  if ! has_wrapper; then
    need=1
  fi
  return $(( need == 1 ? 0 : 1 ))
}

bootstrap_execute() {
  # Attempt to install sudoers + wrapper. Prefer root, but try sudo -n as airplay.
  # Returns 0 on success, non-zero otherwise.
  if [[ $(id -u) -eq 0 ]]; then
    log "Bootstrap: executing $REPO_DIR/bin/bootstrap"
    "$REPO_DIR/bin/bootstrap" || return 1
  else
    log "Bootstrap: executing $REPO_DIR/bin/bootstrap via sudo"
    if ! sudo -n "$REPO_DIR/bin/bootstrap"; then
      log "Bootstrap attempt via sudo failed (non-interactive)."
      log "Manual recovery required: run as root -> $REPO_DIR/bin/bootstrap"
      return 1
    fi
  fi
  # Revalidate
  if ! bootstrap_needed; then
    log "Bootstrap validation: success"
    return 0
  fi
  log "Bootstrap validation: failed"
  return 1
}

yaml_get_target_tag() {
  local file=$1
  awk -F: '/^target_tag\s*:/ {val=$2; sub(/^[[:space:]]+/,"",val); sub(/[[:space:]]+$/,"",val); gsub(/^"|"$/,"",val); gsub(/^\'"'"'|\'"'"'$/,"",val); print val; exit}' "$file" 2>/dev/null || true
}

highest_semver_tag() {
  git tag -l 'v[0-9]*.[0-9]*.[0-9]*' | \
    grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | \
    sort -V | tail -n1
}

current_commit_matches_tag() {
  local tag=$1
  local head tgt
  head=$(git rev-parse HEAD)
  tgt=$(git rev-list -n1 "$tag")
  [[ "$head" == "$tgt" ]]
}

short_host() { hostname -s 2>/dev/null || hostname; }

main() {
  local rc=1 target_tag=""

  # Ensure correct user or handle root for first-time bootstrap
  if [[ "$(id -un)" != "airplay" ]]; then
    if [[ $(id -u) -eq 0 ]]; then
      log "Updater invoked as root; performing bootstrap then re-exec as airplay"
      # Try bootstrap as root
      if bootstrap_needed; then
        log "Bootstrap detection: sudo not configured or wrapper missing; performing bootstrap"
        bootstrap_execute || true
      fi
      # Re-exec as airplay for normal flow
      exec sudo -u airplay -E "$0" "$@"
    fi
    echo "This script must run as user 'airplay'" >&2
    write_last_update "" 1
    exit 1
  fi

  cd "$REPO_DIR"
  log "Updater starting in $PWD"

  # Fetch tags with pruning to ensure devices drop stale/moved tags
  log "Running: git fetch --tags --force --prune --prune-tags origin"
  git fetch --tags --force --prune --prune-tags origin

  # Prefer per-host inventory target_tag
  local inv="$REPO_DIR/inventory/hosts/$(short_host).yml"
  if [[ -f "$inv" ]]; then
    target_tag=$(yaml_get_target_tag "$inv" || true)
  fi
  if [[ -z "${target_tag:-}" ]]; then
    target_tag=$(highest_semver_tag || true)
  fi
  if [[ -z "${target_tag:-}" ]]; then
    log "No target tag determined (no target_tag and no SemVer tags)"
    write_last_update "" 1
    exit 1
  fi
  log "Target tag: $target_tag"

  # Ensure selected tag exists after fetch; if not, emit a single structured error and exit non-zero
  if ! git show-ref --verify --quiet "refs/tags/$target_tag"; then
    # Structured single-line error suitable for journald parsing
    log "event=update_error kind=tag_mismatch target_tag=$target_tag reason=missing_tag_after_fetch"
    write_last_update "$target_tag" 1
    SUPPRESS_TRAP_LOG=1
    exit 1
  fi

  # Optional GPG verification (disabled by default). Enable with AIRPLAY_VERIFY_TAGS=1
  # or by setting `verify_gpg: true` in the host inventory file.
  verify_flag="${AIRPLAY_VERIFY_TAGS:-}"
  if [[ -z "$verify_flag" && -f "$inv" ]]; then
    if grep -Eiq '^verify_gpg:\s*(true|yes|1)\b' "$inv"; then
      verify_flag=1
    else
      verify_flag=0
    fi
  fi
  verify_flag=${verify_flag:-0}
  if [[ "$verify_flag" == "1" ]]; then
    if ! git verify-tag "$target_tag"; then
      log "git verify-tag failed for $target_tag"
      write_last_update "$target_tag" 1
      exit 1
    fi
  else
    log "GPG tag verification disabled (using SSH/Git SHA workflows)"
  fi

  if current_commit_matches_tag "$target_tag"; then
    log "Already at $target_tag"
  else
    log "Checking out tags/$target_tag"
    git checkout -f "tags/$target_tag"
  fi

  # Ensure critical scripts are executable (defense-in-depth for filemode issues)
  for f in \
    "$REPO_DIR/bin/converge" \
    "$REPO_DIR/bin/reconcile" \
    "$REPO_DIR/bin/preflight" \
    "$REPO_DIR/bin/update" \
    "$REPO_DIR/bin/diag" \
    "$REPO_DIR/bin/health" \
    "$REPO_DIR/bin/rollback" \
    "$REPO_DIR/pkg/install.sh"; do
    [[ -f "$f" ]] && chmod +x "$f" 2>/dev/null || true
  done

  # Sync systemd units if repo versions changed (GitOps for units)
  sync_systemd_units

  # Bootstrap phase: ensure sudoers + wrapper are present for privileged transient actions
  if bootstrap_needed; then
    log "Bootstrap detection: sudo not configured or wrapper missing; performing bootstrap"
    log "Bootstrap: executing $REPO_DIR/bin/bootstrap"
    if ! bootstrap_execute; then
      # Do not proceed to converge without privilege model; emit structured error and exit non-zero
      log "event=bootstrap_required status=failed reason='sudo_not_configured_or_wrapper_missing'"
      write_last_update "$target_tag" 1
      SUPPRESS_TRAP_LOG=1
      exit 1
    fi
  else
    log "Bootstrap detection: already configured"
  fi

  # Package installs and unit sync handled by converge/reconcile.

  write_last_update "$target_tag" 0
  log "Updater completed; starting converge"
  "$REPO_DIR/bin/converge" || true
}

trap 'rc=$?; if [[ $rc -ne 0 && ${SUPPRESS_TRAP_LOG:-0} -ne 1 ]]; then log "Updater failed rc=$rc"; fi; exit $rc' EXIT
main "$@"
