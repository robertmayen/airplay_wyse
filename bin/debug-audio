#!/usr/bin/env bash
set -euo pipefail

# debug-audio: Extensive diagnostic for chopped/stuttering audio.
# - Checks Shairport build features (soxr), service status, config, and logs
# - Verifies AP2/RAOP identity via verify-airplay-identity
# - Inspects ALSA devices and mixer controls; tests opening selected device at 44.1k via plug
# - Inspects network interface used and basic Wi‑Fi power-save status if applicable
# - Summarises recent nqptp timing status (lock/offset/resync)
# - Captures key scheduler/CPU info for shairport-sync
# - Summarises likely causes with remediation hints

ts() { date -u +"%Y-%m-%dT%H:%M:%SZ"; }
say() { echo "$(ts) [debug-audio] $*"; }
warn() { echo "$(ts) [debug-audio] WARN: $*"; }
err() { echo "$(ts) [debug-audio] ERROR: $*"; }

CONF="/etc/shairport-sync.conf"
DEFAULTS="/etc/default/airplay_wyse"

# Flags
LIVE_DUR=""
IFACE_OVERRIDE=""

read_conf_kv() {
  local key="$1"
  awk -v k="$key" 'BEGIN{IGNORECASE=1} $0 ~ "^[[:space:]]*"k"[[:space:]]*=" {match($0, /=[[:space:]]*"[^"]*"/); if (RSTART>0) {v=substr($0, RSTART+2, RLENGTH-2); gsub(/^[ \t\"]+|[ \t\"]+$/, "", v); print v; exit}}' "$CONF" 2>/dev/null || true
}

iface_from_conf() {
  read_conf_kv interface || true
}

device_from_conf() {
  awk 'BEGIN{IGNORECASE=1}
    /^alsa[[:space:]]*=/{insec=1}
    insec && /output_device[[:space:]]*=/ {match($0,/"[^"]+"/); if(RSTART>0){v=substr($0,RSTART+1,RLENGTH-2); print v; exit}}
    insec && /^};/ {insec=0}
  ' "$CONF" 2>/dev/null || true
}

wifi_powersave() {
  local i="$1"
  command -v iw >/dev/null 2>&1 || { echo "unknown"; return 0; }
  iw dev "$i" get power_save 2>/dev/null | awk '{print $NF}' || echo unknown
}

cpu_for_proc() {
  local p="$1"
  ps -o %cpu= -p "$p" 2>/dev/null | awk '{print $1+0}' || echo 0
}

usage() {
  cat <<EOF
Usage: ./bin/debug-audio [--live <duration>] [--iface <iface>]

Examples:
  ./bin/debug-audio                 # baseline diagnostics only
  ./bin/debug-audio --live 20s      # baseline + 20s live capture (no files written)
  ./bin/debug-audio --live 30 --iface enp1s0

Duration accepts seconds (e.g., 20 or 20s) or minutes (e.g., 2m).
EOF
}

parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --live) shift; LIVE_DUR="${1:-}" ;;
      --iface|--interface) shift; IFACE_OVERRIDE="${1:-}" ;;
      -h|--help) usage; exit 0 ;;
      *) err "unknown argument: $1"; exit 1 ;;
    esac
    shift || true
  done
}

duration_to_seconds() {
  local d="$1"
  if [[ -z "$d" ]]; then echo 0; return 0; fi
  if [[ "$d" =~ ^[0-9]+$ ]]; then echo "$d"; return 0; fi
  if [[ "$d" =~ ^([0-9]+)s$ ]]; then echo "${BASH_REMATCH[1]}"; return 0; fi
  if [[ "$d" =~ ^([0-9]+)m$ ]]; then echo $(( ${BASH_REMATCH[1]} * 60 )); return 0; fi
  echo "$d"
}

iface_guess() {
  local iface
  iface="${IFACE_OVERRIDE:-}"
  if [[ -z "$iface" ]]; then
    iface=$(iface_from_conf || true)
  fi
  if [[ -z "$iface" ]]; then
    iface=$(ip route 2>/dev/null | awk '/^default/ {print $5; exit}')
  fi
  echo "$iface"
}

show_iface_details() {
  local iface="$1"
  [[ -n "$iface" ]] || return 0
  say "Interface: $iface ($(ip -br link show "$iface" 2>/dev/null | awk '{print $3}'))"
  ip -br addr show "$iface" 2>/dev/null || true
  if command -v ethtool >/dev/null 2>&1; then
    ethtool "$iface" 2>/dev/null | awk 'NR<=12{print}' || true
    ethtool -i "$iface" 2>/dev/null | awk 'NR<=6{print}' || true
  fi
  say "Link counters (ip -s link):"
  ip -s link show dev "$iface" 2>/dev/null || true
  if iw dev "$iface" info >/dev/null 2>&1; then
    say "Wi‑Fi powersave: $(wifi_powersave "$iface")"
    iw dev "$iface" link 2>/dev/null || true
  fi
}

show_nqptp_status() {
  say "nqptp status:"
  if systemctl is-active --quiet nqptp.service; then echo active; else echo inactive; fi
  if systemctl is-enabled --quiet nqptp.service; then echo enabled; else echo disabled; fi
  say "Recent nqptp logs (lock/offset/resync):"
  if command -v rg >/dev/null 2>&1; then
    journalctl -u nqptp -n 120 --no-pager 2>/dev/null | \
      rg -i "lock|offset|resync|synch|leap|step" -n || echo "(no notable messages)"
  else
    journalctl -u nqptp -n 120 --no-pager 2>/dev/null | \
      grep -Ei "lock|offset|resync|synch|leap|step" || echo "(no notable messages)"
  fi
}

show_shairport_sched() {
  local pid
  if pidof shairport-sync >/dev/null 2>&1; then
    pid=$(pidof shairport-sync | awk '{print $1}')
    say "Shairport CPU% (snapshot): $(cpu_for_proc "$pid")"
    if ps -p "$pid" >/dev/null 2>&1; then
      ps -Lo pid,rtprio,pri,ni,psr,pcpu,stat,comm -p "$pid" 2>/dev/null || true
    fi
  fi
}

# Gateway and Wi‑Fi jitter diagnostics
default_gateway() {
  ip route 2>/dev/null | awk '/^default/ {print $3; exit}'
}

wifi_link_brief() {
  local iface="$1"
  iw dev "$iface" link 2>/dev/null | awk 'BEGIN{sig="";rx="";tx=""}
    /signal:/ {sig=$2}
    /rx bitrate:/ {rx=$3$4}
    /tx bitrate:/ {tx=$3$4}
    END{ if(sig!="" || rx!="" || tx!="") printf("signal=%s dBm rx=%s tx=%s\n", sig, rx, tx) }'
}

wifi_survey_util() {
  local iface="$1" secs="${2:-2}"
  command -v iw >/dev/null 2>&1 || { echo "util=unknown"; return 0; }
  local a1 b1 a2 b2
  read a1 b1 < <(iw dev "$iface" survey dump 2>/dev/null | awk 'BEGIN{inuse=0;a=b=0}
    /in use/ {inuse=1}
    inuse && /channel time:/ {a=$3}
    inuse && /busy time:/ {b=$3}
    END{print a,b}')
  sleep "$secs"
  read a2 b2 < <(iw dev "$iface" survey dump 2>/dev/null | awk 'BEGIN{inuse=0;a=b=0}
    /in use/ {inuse=1}
    inuse && /channel time:/ {a=$3}
    inuse && /busy time:/ {b=$3}
    END{print a,b}')
  if [[ -n "${a1:-}" && -n "${a2:-}" && "$a2" -gt "$a1" ]]; then
    local da=$((a2-a1)) db=$((b2-b1))
    local pct=$(( 100*db/da ))
    echo "util=${pct}% (window ${secs}s)"
  else
    echo "util=unknown"
  fi
}

ping_jitter() {
  local host="$1" cnt="${2:-30}" interval="${3:-0.2}" timeout="${4:-10}"
  local out loss mdev avg
  out=$(ping -n -q -c "$cnt" -i "$interval" -w "$timeout" "$host" 2>/dev/null || true)
  loss=$(echo "$out" | awk -F', ' '/packets transmitted/ { for(i=1;i<=NF;i++) if ($i ~ /packet loss/) { sub(/%.*/,"",$i); sub(/.* /,"",$i); print $i } }')
  avg=$(echo "$out" | awk -F'/' '/rtt/ {gsub(/ ms/,"",$2); print $2}')
  mdev=$(echo "$out" | awk -F'/' '/rtt/ {gsub(/ ms/,"",$4); print $4}')
  if [[ -n "${loss:-}" || -n "${mdev:-}" || -n "${avg:-}" ]]; then
    echo "loss=${loss:-n/a}% rtt_avg=${avg:-n/a}ms jitter_mdev=${mdev:-n/a}ms"
  else
    echo "(ping summary unavailable)"
  fi
}

show_wifi_jitter() {
  local iface="$1" gw
  [[ -n "$iface" ]] || return 0
  if ! iw dev "$iface" info >/dev/null 2>&1; then return 0; fi
  say "Wi‑Fi link: $(wifi_link_brief "$iface")"
  say "Wi‑Fi channel util: $(wifi_survey_util "$iface" 2)"
  gw=$(default_gateway || true)
  if [[ -n "$gw" ]]; then
    say "Gateway ping (30x, 200ms interval): $(ping_jitter "$gw" 30 0.2 10)"
  fi
}

live_capture() {
  # Stream logs for a bounded duration, summarize key events; do not write files.
  local dursecs="$1" iface
  iface="$(iface_guess)"
  say "Live capture for ${dursecs}s (iface=${iface:-unknown}) — no files will be written"
  if [[ -n "$iface" ]]; then
    say "Link counters before:"
    ip -s link show dev "$iface" 2>/dev/null || true
  fi

  local c_und=0 c_over=0 c_xrun=0 c_buf=0 c_syncerr=0 c_resync=0 c_lock=0 c_unlock=0
  local -a samples=()
  if ! command -v journalctl >/dev/null 2>&1; then
    warn "journalctl not available; skipping live log stream"
  else
    local line lcl
    while IFS= read -r line; do
      echo "$line"
      lcl=$(printf '%s' "$line" | tr '[:upper:]' '[:lower:]')
      [[ "$lcl" == *"underrun"* ]] && ((c_und++))
      [[ "$lcl" == *"overrun"* ]] && ((c_over++))
      [[ "$lcl" == *"xrun"* ]] && ((c_xrun++))
      [[ "$lcl" == *"buffer"* ]] && ((c_buf++))
      [[ "$lcl" == *"sync error"* ]] && ((c_syncerr++))
      { [[ "$lcl" == *"resync"* ]] || [[ "$lcl" == *"flush"* ]]; } && ((c_resync++))
      if [[ "$lcl" == *"nqptp"* ]]; then
        [[ "$lcl" == *"lock"* ]] && ((c_lock++))
        [[ "$lcl" == *"unlock"* ]] && ((c_unlock++))
      fi
      if [[ ${#samples[@]} -lt 8 ]]; then
        if [[ "$lcl" == *"underrun"* || "$lcl" == *"overrun"* || "$lcl" == *"xrun"* || "$lcl" == *"sync error"* || "$lcl" == *"resync"* || "$lcl" == *"flush"* || "$lcl" == *"offset"* ]]; then
          samples+=("$line")
        fi
      fi
    done < <(timeout "$dursecs" journalctl -f -u shairport-sync -u nqptp --no-pager -o short-iso 2>&1 || true)
  fi

  say "Summary of live capture:"
  echo "events: underrun=$c_und overrun=$c_over xruns=$c_xrun sync_error=$c_syncerr resync/flush=$c_resync nqptp_lock=$c_lock nqptp_unlock=$c_unlock"
  say "Sample lines:"
  if [[ ${#samples[@]} -gt 0 ]]; then
    for s in "${samples[@]}"; do echo "$s"; done
  else
    echo "(no notable lines)"
  fi
  if [[ -n "${iface:-}" ]]; then
    say "Link counters after:"
    ip -s link show dev "$iface" 2>/dev/null || true
  fi
}

main() {
  parse_args "$@"
  say "Collecting diagnostics..."
  local ver build soxr
  if command -v shairport-sync >/dev/null 2>&1; then
    ver=$(shairport-sync -V 2>&1 | head -1)
    soxr=$(shairport-sync -V 2>&1 | grep -q soxr && echo yes || echo no)
    say "shairport-sync: $ver (soxr=$soxr)"
  else
    err "shairport-sync not found"
  fi

  say "Service status:"
  systemctl is-active --quiet shairport-sync && echo "active" || echo "inactive"
  systemctl is-enabled --quiet shairport-sync && echo "enabled" || echo "disabled"

say "Config excerpts:"
  diag_stats=$(awk 'BEGIN{IGNORECASE=1}
    /^diagnostics[[:space:]]*=/{insec=1}
    insec && /statistics[[:space:]]*=/ {match($0,/"[^"]+"/); if(RSTART>0){v=substr($0,RSTART+1,RLENGTH-2); print v; exit}}
    insec && /^};/ {insec=0}
  ' "$CONF" 2>/dev/null || true)
  gen_stats=$(awk 'BEGIN{IGNORECASE=1}
    /^general[[:space:]]*=/{insec=1}
    insec && /statistics[[:space:]]*=/ {match($0,/"[^"]+"/); if(RSTART>0){v=substr($0,RSTART+1,RLENGTH-2); print v; exit}}
    insec && /^};/ {insec=0}
  ' "$CONF" 2>/dev/null || true)
  echo "[general] interface=$(iface_from_conf || echo unset) diagnostics.statistics=${diag_stats:-unset} general.statistics=${gen_stats:-unset}"
  echo "[alsa] device=$(device_from_conf || echo unset)"

  # PipeWire policy (best-effort)
  if [[ -x /usr/bin/pw-dump || -x /usr/bin/pw-cli || -d /etc/pipewire ]]; then
    say "PipeWire policy:"
    if [[ -f /etc/pipewire/pipewire.conf.d/90-airplay_wyse.conf ]]; then
      awk 'NR<=40{print}' /etc/pipewire/pipewire.conf.d/90-airplay_wyse.conf 2>/dev/null || true
    else
      echo "(no AirPlay Wyse drop-in present)"
    fi
    if command -v pw-dump >/dev/null 2>&1; then
      local pw_out pw_rate
      if pw_out=$(pw-dump 2>/dev/null); then
        pw_rate=$(printf '%s\n' "$pw_out" | awk -F'[,: ]+' '/"clock\.rate"/{print $3; exit}' | tr -dc '0-9')
        if [[ -n "$pw_rate" ]]; then echo "PipeWire clock.rate=${pw_rate}"; fi
      fi
    fi
  fi

  # ALSA policy anchor and chain
  say "ALSA anchor & chain:"
  local policy_json="" anchor="" cardid="" devnum="" soxr_required=0
  for candidate in /var/lib/airplay_wyse/config.json /var/lib/airplay_wyse/alsa-policy.json; do
    if [[ -f "$candidate" ]]; then
      policy_json="$candidate"
      break
    fi
  done
  if [[ -n "$policy_json" ]]; then
    anchor=$(awk -F'[,:}]' '/"anchor_hz"/{for(i=1;i<=NF;i++) if ($i ~ /"anchor_hz"/) {val=$(i+1); gsub(/[^0-9]/, "", val); print val; exit}}' "$policy_json")
    cardid=$(awk -F'"' '/"card_id"/{print $4; exit}' "$policy_json")
    devnum=$(awk -F'[,:}]' '/"dev_num"/{for(i=1;i<=NF;i++) if ($i ~ /"dev_num"/) {val=$(i+1); gsub(/[^0-9]/, "", val); print val; exit}}' "$policy_json")
    local soxr_raw
    soxr_raw=$(awk -F'[,:}]' '/"requires_soxr"/{for(i=1;i<=NF;i++) if ($i ~ /"requires_soxr"/) {val=$(i+1); gsub(/[ \t\r\n\"]/, "", val); print val; exit}}' "$policy_json")
    case "$soxr_raw" in
      1|true|TRUE) soxr_required=1 ;;
      *) soxr_required=0 ;;
    esac
    if [[ -n "$anchor" ]]; then
      if [[ "$anchor" == "44100" ]]; then
        echo "anchor=44100 (AirPlay-native), card=${cardid:-?}, dev=${devnum:-?}"
      else
        if [[ $soxr_required -eq 1 ]]; then
          echo "anchor=${anchor} (+soxr), card=${cardid:-?}, dev=${devnum:-?}"
        else
          echo "anchor=${anchor}, card=${cardid:-?}, dev=${devnum:-?}"
        fi
      fi
    else
      echo "(policy present but anchor missing)"
    fi
  else
    echo "(no AirPlay Wyse policy state found)"
  fi
  if [[ -f /etc/asound.conf ]]; then
    local has_hw has_default has_ctl
    grep -qi 'pcm.airplay_wyse_hw' /etc/asound.conf && has_hw=OK || has_hw=NO
    if grep -qi 'pcm.!default' /etc/asound.conf && \
       grep -qi 'type[[:space:]]\+plug' /etc/asound.conf && \
       grep -qi 'slave.pcm[[:space:]]\+airplay_wyse_hw' /etc/asound.conf; then
      has_default=OK
    else
      has_default=NO
    fi
    grep -qi 'ctl.!default' /etc/asound.conf && has_ctl=OK || has_ctl=NO
    echo "chain: hw=${has_hw} default_plug=${has_default} ctl=${has_ctl}"
    if [[ -n "$anchor" ]]; then
      if [[ "$anchor" = "44100" ]]; then
        echo "ALSA sink: expected anchor=44100"
      elif [[ "$anchor" = "48000" && $soxr_required -eq 1 ]]; then
        echo "ALSA sink: expected anchor=48000 with soxr"
      else
        echo "ALSA sink: expected anchor=${anchor}"
      fi
    fi
  else
    echo "(no /etc/asound.conf found)"
  fi

  say "AP2/RAOP identity check:"
  if [[ -x "$(dirname "$0")/verify-airplay-identity" ]]; then
    if ! "$(dirname "$0")/verify-airplay-identity"; then
      warn "Identity check failed; see above"
    fi
  else
    warn "verify-airplay-identity not executable"
  fi

  say "Recent Shairport logs (underruns/overruns/errors):"
  if command -v rg >/dev/null 2>&1; then
    journalctl -u shairport-sync -n 200 --no-pager 2>/dev/null | \
      rg -i "underrun|overrun|xruns|buffer|latenc|sync error|can not be set|error" -n || echo "(no notable messages)"
  else
    journalctl -u shairport-sync -n 200 --no-pager 2>/dev/null | \
      grep -Ei "underrun|overrun|xruns|buffer|latenc|sync error|can not be set|error" || echo "(no notable messages)"
  fi

  say "ALSA devices:"
  aplay -l 2>/dev/null || true
  local dev
  dev=$(device_from_conf || true)
  if [[ -n "$dev" ]]; then
  say "Testing if device accepts 44.1k via ALSA plug (short 0dB sine):"
  if command -v speaker-test >/dev/null 2>&1; then
    timeout 3 speaker-test -D "$dev" -c 2 -r 44100 -t sine -l 1 >/dev/null 2>&1 && \
      echo "OK: $dev opened at 44.1k" || warn "$dev did not open at 44.1k"
  else
    timeout 3 aplay -D "$dev" -r 44100 -f S16_LE -c 2 -t raw /dev/zero -q 2>/dev/null && \
      echo "OK: $dev opened at 44.1k" || warn "$dev did not open at 44.1k"
  fi
  fi

  # Interpolation check
  local interp_conf
  interp_conf=$(awk 'BEGIN{IGNORECASE=1}
    /^alsa[[:space:]]*=/{insec=1}
    insec && /interpolation[[:space:]]*=/ {match($0,/"[^"]+"/); if(RSTART>0){v=substr($0,RSTART+1,RLENGTH-2); print v; exit}}
    insec && /^};/ {insec=0}
  ' "$CONF" 2>/dev/null || true)
  if [[ -n "$interp_conf" ]]; then echo "[alsa] interpolation=${interp_conf}"; fi

  local iface
  iface="$(iface_guess)"
  show_iface_details "$iface"
  show_wifi_jitter "$iface"
  show_nqptp_status
  show_shairport_sched

  say "Done. Likely causes and hints:"
  echo "- If logs show underruns/overruns: increase Wi‑Fi stability (reduce powersave), prefer Ethernet, or move AP closer."
  echo "- If ALSA device can't open at 44.1k and you're not using a USB DAC, keep using plughw:<card>,<dev>."
  echo "- If CPU% is high and soxr is used, consider reducing other load; Wyse 5070 usually handles it fine."
  echo "- If nqptp is frequently unlocking or large offsets appear, check LAN stability and any VM/clock virtualization."

  # Optional live capture
  if [[ -n "${LIVE_DUR:-}" ]]; then
    local secs
    secs=$(duration_to_seconds "$LIVE_DUR")
    [[ "$secs" =~ ^[0-9]+$ ]] || { warn "invalid --live duration '$LIVE_DUR'"; return 0; }
    live_capture "$secs"
  fi
}

main "$@"
