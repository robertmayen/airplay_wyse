#!/usr/bin/env bash
set -euo pipefail

# debug-audio: Extensive diagnostic for chopped/stuttering audio.
# - Checks Shairport build features (soxr), service status, config, and logs
# - Verifies AP2/RAOP identity via verify-airplay-identity
# - Inspects ALSA devices and mixer controls; tests opening selected device at 44.1k via plug
# - Inspects network interface used and basic Wi‑Fi power-save status if applicable
# - Summarises recent nqptp timing status (lock/offset/resync)
# - Captures key scheduler/CPU info for shairport-sync
# - Summarises likely causes with remediation hints

ts() { date -u +"%Y-%m-%dT%H:%M:%SZ"; }
say() { echo "$(ts) [debug-audio] $*"; }
warn() { echo "$(ts) [debug-audio] WARN: $*"; }
err() { echo "$(ts) [debug-audio] ERROR: $*"; }

CONF="/etc/shairport-sync.conf"
DEFAULTS="/etc/default/airplay_wyse"

# Flags
LIVE_DUR=""
IFACE_OVERRIDE=""

read_conf_kv() {
  local key="$1"
  awk -v k="$key" 'BEGIN{IGNORECASE=1} $0 ~ "^[[:space:]]*"k"[[:space:]]*=" {match($0, /=[[:space:]]*"[^"]*"/); if (RSTART>0) {v=substr($0, RSTART+2, RLENGTH-2); gsub(/^[ \t\"]+|[ \t\"]+$/, "", v); print v; exit}}' "$CONF" 2>/dev/null || true
}

iface_from_conf() {
  read_conf_kv interface || true
}

device_from_conf() {
  awk 'BEGIN{IGNORECASE=1}
    /^alsa[[:space:]]*=/{insec=1}
    insec && /output_device[[:space:]]*=/ {match($0,/"[^"]+"/); if(RSTART>0){v=substr($0,RSTART+1,RLENGTH-2); print v; exit}}
    insec && /^};/ {insec=0}
  ' "$CONF" 2>/dev/null || true
}

device_is_dmix_or_default() {
  local dev="$1"
  [[ -z "$dev" ]] && return 1
  case "$dev" in
    default|default:*) return 0 ;;
    dmix:*|plughw:*) return 0 ;;
  esac
  # Inspect aplay -L block if present
  if command -v aplay >/dev/null 2>&1; then
    local block
    block=$(aplay -L 2>/dev/null | awk -v d="$dev" 'BEGIN{p=0} $0==d {p=1;print;next} p {print} /^$/ {p=0}')
    if echo "$block" | grep -qiE '\bdmix\b|\bdefault\b'; then return 0; fi
  fi
  return 1
}

named_pcm_loaded() {
  local dev="$1"
  [[ -z "$dev" ]] && return 1
  command -v aplay >/dev/null 2>&1 || return 1
  aplay -L 2>/dev/null | awk -v d="$dev" 'BEGIN{ok=0} $0==d{ok=1} END{exit ok?0:1}'
}

extract_fps_window() {
  # Prints last up to 12 Output FPS (r) values, one per line
  journalctl -u shairport-sync -n 500 --no-pager 2>/dev/null | \
    awk -F'|' '/\|/ { last=$0 } END{ print last }' | sed -n '1p' >/dev/null || true
  journalctl -u shairport-sync -n 500 --no-pager 2>/dev/null | \
    awk -F'|' 'BEGIN{c=0} /\|/ {fps=$4; gsub(/^ +| +$/, "", fps); if (fps!="" && fps ~ /^[0-9.]+$/) { print fps; c++; if(c>=12) exit }}'
}

print_sink_rate_status() {
  local arr=() v maxdev=0 latest=""
  while IFS= read -r v; do arr+=("$v"); done < <(extract_fps_window || true)
  if [[ ${#arr[@]} -eq 0 ]]; then echo "Output FPS unavailable (enable diagnostics.statistics=yes)"; return 0; fi
  latest="${arr[0]}"
  for v in "${arr[@]}"; do
    d=$(awk -v f="$v" 'BEGIN{d=f-44100; if(d<0)d=-d; printf "%.6f", d}')
    pct=$(awk -v f="$v" 'BEGIN{d=f-44100; if(d<0)d=-d; printf "%.6f", (d/44100)*100}')
    awk -v p="$pct" -v m="$maxdev" 'BEGIN{ if ((p+0.0) > (m+0.0)) print p; else print m }' >/dev/null 2>&1 || true
    if awk -v p="$pct" -v m="$maxdev" 'BEGIN{ exit ( (p+0.0) > (m+0.0) ? 0 : 1 ) }'; then maxdev="$pct"; fi
  done
  if awk -v m="$maxdev" 'BEGIN{ exit ( (m+0.0) > 0.5 ? 0 : 1 ) }'; then
    echo "SINK NOT AT 44.1k (Output FPS ≈ ${latest}; dev=${maxdev}% over recent window)"
  else
    echo "Sink rate OK: Output FPS ≈ ${latest}"
  fi
}

active_hw_params() {
  local dev="$1" card d sub base
  [[ "$dev" =~ ^hw:([0-9]+),([0-9]+)$ ]] || return 1
  card="${BASH_REMATCH[1]}"; d="${BASH_REMATCH[2]}"; base="/proc/asound/card${card}/pcm${d}p"
  for sub in "$base"/sub*; do
    [[ -f "$sub/status" ]] || continue
    if grep -q '^state: *RUNNING' "$sub/status" 2>/dev/null; then
      echo "$sub/hw_params"
      return 0
    fi
  done
  # If none running, provide any existing hw_params for inspection
  for sub in "$base"/sub*/hw_params; do [[ -f "$sub" ]] && { echo "$sub"; return 0; }; done
  return 1
}

wifi_powersave() {
  local i="$1"
  command -v iw >/dev/null 2>&1 || { echo "unknown"; return 0; }
  iw dev "$i" get power_save 2>/dev/null | awk '{print $NF}' || echo unknown
}

cpu_for_proc() {
  local p="$1"
  ps -o %cpu= -p "$p" 2>/dev/null | awk '{print $1+0}' || echo 0
}

usage() {
  cat <<EOF
Usage: ./bin/debug-audio [--live <duration>] [--iface <iface>]

Examples:
  ./bin/debug-audio                 # baseline diagnostics only
  ./bin/debug-audio --live 20s      # baseline + 20s live capture (no files written)
  ./bin/debug-audio --live 30 --iface enp1s0

Duration accepts seconds (e.g., 20 or 20s) or minutes (e.g., 2m).
EOF
}

parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --live) shift; LIVE_DUR="${1:-}" ;;
      --iface|--interface) shift; IFACE_OVERRIDE="${1:-}" ;;
      -h|--help) usage; exit 0 ;;
      *) err "unknown argument: $1"; exit 1 ;;
    esac
    shift || true
  done
}

duration_to_seconds() {
  local d="$1"
  if [[ -z "$d" ]]; then echo 0; return 0; fi
  if [[ "$d" =~ ^[0-9]+$ ]]; then echo "$d"; return 0; fi
  if [[ "$d" =~ ^([0-9]+)s$ ]]; then echo "${BASH_REMATCH[1]}"; return 0; fi
  if [[ "$d" =~ ^([0-9]+)m$ ]]; then echo $(( ${BASH_REMATCH[1]} * 60 )); return 0; fi
  echo "$d"
}

iface_guess() {
  local iface
  iface="${IFACE_OVERRIDE:-}"
  if [[ -z "$iface" ]]; then
    iface=$(iface_from_conf || true)
  fi
  if [[ -z "$iface" ]]; then
    iface=$(ip route 2>/dev/null | awk '/^default/ {print $5; exit}')
  fi
  echo "$iface"
}

show_iface_details() {
  local iface="$1"
  [[ -n "$iface" ]] || return 0
  say "Interface: $iface ($(ip -br link show "$iface" 2>/dev/null | awk '{print $3}'))"
  ip -br addr show "$iface" 2>/dev/null || true
  if command -v ethtool >/dev/null 2>&1; then
    ethtool "$iface" 2>/dev/null | awk 'NR<=12{print}' || true
    ethtool -i "$iface" 2>/dev/null | awk 'NR<=6{print}' || true
  fi
  say "Link counters (ip -s link):"
  ip -s link show dev "$iface" 2>/dev/null || true
  if iw dev "$iface" info >/dev/null 2>&1; then
    say "Wi‑Fi powersave: $(wifi_powersave "$iface")"
    iw dev "$iface" link 2>/dev/null || true
  fi
}

wifi_station_brief() {
  local iface="$1" bssid info connected retries failed blost sigavg
  bssid=$(iw dev "$iface" link 2>/dev/null | awk '/Connected to/ {print $3; exit}')
  [[ -n "$bssid" ]] || return 0
  info=$(iw dev "$iface" station get "$bssid" 2>/dev/null || iw dev "$iface" station dump 2>/dev/null)
  [[ -n "$info" ]] || return 0
  connected=$(echo "$info" | awk -F': *' '/connected time:/ {print $2; exit}' | awk '{print $1}')
  retries=$(echo "$info" | awk -F': *' '/tx retries:/ {print $2; exit}' | awk '{print $1}')
  failed=$(echo "$info" | awk -F': *' '/tx failed:/ {print $2; exit}' | awk '{print $1}')
  blost=$(echo "$info" | awk -F': *' '/beacon loss:/ {print $2; exit}' | awk '{print $1}')
  sigavg=$(echo "$info" | awk -F': *' '/signal avg:/ {print $2; exit}' | awk '{print $1}')
  if [[ -n "$retries$failed$blost$sigavg$connected" ]]; then
    echo "bssid=$bssid signal_avg=${sigavg:-n/a}dBm tx_retries=${retries:-n/a} tx_failed=${failed:-n/a} beacon_loss=${blost:-n/a} connected_s=${connected:-n/a}"
  fi
}

show_nqptp_status() {
  say "nqptp status:"
  if systemctl is-active --quiet nqptp.service; then echo active; else echo inactive; fi
  if systemctl is-enabled --quiet nqptp.service; then echo enabled; else echo disabled; fi
  say "Recent nqptp logs (lock/offset/resync):"
  if command -v rg >/dev/null 2>&1; then
    journalctl -u nqptp -n 120 --no-pager 2>/dev/null | \
      rg -i "lock|offset|resync|synch|leap|step" -n || echo "(no notable messages)"
  else
    journalctl -u nqptp -n 120 --no-pager 2>/dev/null | \
      grep -Ei "lock|offset|resync|synch|leap|step" || echo "(no notable messages)"
  fi
}

show_shairport_sched() {
  local pid
  if pidof shairport-sync >/dev/null 2>&1; then
    pid=$(pidof shairport-sync | awk '{print $1}')
    say "Shairport CPU% (snapshot): $(cpu_for_proc "$pid")"
    if ps -p "$pid" >/dev/null 2>&1; then
      ps -Lo pid,rtprio,pri,ni,psr,pcpu,stat,comm -p "$pid" 2>/dev/null || true
    fi
  fi
}

# Gateway and Wi‑Fi jitter diagnostics
default_gateway() {
  ip route 2>/dev/null | awk '/^default/ {print $3; exit}'
}

wifi_link_brief() {
  local iface="$1"
  iw dev "$iface" link 2>/dev/null | awk 'BEGIN{sig="";rx="";tx=""}
    /signal:/ {sig=$2}
    /rx bitrate:/ {rx=$3$4}
    /tx bitrate:/ {tx=$3$4}
    END{ if(sig!="" || rx!="" || tx!="") printf("signal=%s dBm rx=%s tx=%s\n", sig, rx, tx) }'
}

wifi_survey_util() {
  local iface="$1" secs="${2:-2}"
  command -v iw >/dev/null 2>&1 || { echo "util=unknown"; return 0; }
  local a1 b1 a2 b2
  # Prefer counters for the currently-used channel; fall back to first block
  read a1 b1 < <(iw dev "$iface" survey dump 2>/dev/null | awk 'BEGIN{inuse=0;a=-1;b=-1;fa=-1;fb=-1}
    /in use/ {inuse=1}
    /channel time:/ { if (fa<0) fa=$3; if (inuse) a=$3 }
    /busy time:/ { if (fb<0) fb=$3; if (inuse) b=$3 }
    END{ if (a<0) a=fa; if (b<0) b=fb; if (a<0) a=0; if (b<0) b=0; print a,b }')
  sleep "$secs"
  read a2 b2 < <(iw dev "$iface" survey dump 2>/dev/null | awk 'BEGIN{inuse=0;a=-1;b=-1;fa=-1;fb=-1}
    /in use/ {inuse=1}
    /channel time:/ { if (fa<0) fa=$3; if (inuse) a=$3 }
    /busy time:/ { if (fb<0) fb=$3; if (inuse) b=$3 }
    END{ if (a<0) a=fa; if (b<0) b=fb; if (a<0) a=0; if (b<0) b=0; print a,b }')
  if [[ -n "${a1:-}" && -n "${a2:-}" && "$a2" -gt "$a1" ]]; then
    local da=$((a2-a1)) db=$((b2-b1))
    local pct=$(( 100*db/da ))
    echo "util=${pct}% (window ${secs}s)"
  else
    echo "util=unknown"
  fi
}

ping_jitter() {
  local host="$1" cnt="${2:-30}" interval="${3:-0.2}" timeout="${4:-10}"
  local out loss avg mdev vals
  out=$(LC_ALL=C ping -n -q -c "$cnt" -i "$interval" -w "$timeout" "$host" 2>/dev/null || true)
  loss=$(echo "$out" | awk -F', *' '/packets transmitted/ { for(i=1;i<=NF;i++) if ($i ~ /packet loss/) { if (match($i, /([0-9.]+)%/, m)) { print m[1] } } }')
  read avg mdev < <(echo "$out" | awk '/rtt/ { split($0,x,"="); gsub(/^ +| +$/,"",x[2]); sub(/ ms$/, "", x[2]); split(x[2],a,"/"); if (a[2] != "") printf "%s %s\n", a[2], a[4]; }')
  if [[ -n "${loss:-}" || -n "${mdev:-}" || -n "${avg:-}" ]]; then
    echo "loss=${loss:-n/a}% rtt_avg=${avg:-n/a}ms jitter_mdev=${mdev:-n/a}ms"
  else
    echo "(ping summary unavailable)"
  fi
}

show_wifi_jitter() {
  local iface="$1" gw
  [[ -n "$iface" ]] || return 0
  if ! iw dev "$iface" info >/dev/null 2>&1; then return 0; fi
  say "Wi‑Fi link: $(wifi_link_brief "$iface")"
  local st
  st=$(wifi_station_brief "$iface" || true)
  [[ -n "$st" ]] && say "Wi‑Fi station: $st"
  say "Wi‑Fi channel util: $(wifi_survey_util "$iface" 2)"
  gw=$(default_gateway || true)
  if [[ -n "$gw" ]]; then
    say "Gateway ping (30x, 200ms interval): $(ping_jitter "$gw" 30 0.2 10)"
  fi
}

live_capture() {
  # Stream logs for a bounded duration, summarize key events; do not write files.
  local dursecs="$1" iface
  iface="$(iface_guess)"
  say "Live capture for ${dursecs}s (iface=${iface:-unknown}) — no files will be written"
  if [[ -n "$iface" ]]; then
    say "Link counters before:"
    ip -s link show dev "$iface" 2>/dev/null || true
  fi

  local c_und=0 c_over=0 c_xrun=0 c_buf=0 c_syncerr=0 c_resync=0 c_lock=0 c_unlock=0
  local -a samples=()
  if ! command -v journalctl >/dev/null 2>&1; then
    warn "journalctl not available; skipping live log stream"
  else
    local line lcl
    while IFS= read -r line; do
      echo "$line"
      lcl=$(printf '%s' "$line" | tr '[:upper:]' '[:lower:]')
      [[ "$lcl" == *"underrun"* ]] && ((c_und++))
      [[ "$lcl" == *"overrun"* ]] && ((c_over++))
      [[ "$lcl" == *"xrun"* ]] && ((c_xrun++))
      [[ "$lcl" == *"buffer"* ]] && ((c_buf++))
      [[ "$lcl" == *"sync error"* ]] && ((c_syncerr++))
      { [[ "$lcl" == *"resync"* ]] || [[ "$lcl" == *"flush"* ]]; } && ((c_resync++))
      if [[ "$lcl" == *"nqptp"* ]]; then
        [[ "$lcl" == *"lock"* ]] && ((c_lock++))
        [[ "$lcl" == *"unlock"* ]] && ((c_unlock++))
      fi
      if [[ ${#samples[@]} -lt 8 ]]; then
        if [[ "$lcl" == *"underrun"* || "$lcl" == *"overrun"* || "$lcl" == *"xrun"* || "$lcl" == *"sync error"* || "$lcl" == *"resync"* || "$lcl" == *"flush"* || "$lcl" == *"offset"* ]]; then
          samples+=("$line")
        fi
      fi
    done < <(timeout "$dursecs" journalctl -f -u shairport-sync -u nqptp --no-pager -o short-iso 2>&1 || true)
  fi

  say "Summary of live capture:"
  echo "events: underrun=$c_und overrun=$c_over xruns=$c_xrun sync_error=$c_syncerr resync/flush=$c_resync nqptp_lock=$c_lock nqptp_unlock=$c_unlock"
  say "Sample lines:"
  if [[ ${#samples[@]} -gt 0 ]]; then
    for s in "${samples[@]}"; do echo "$s"; done
  else
    echo "(no notable lines)"
  fi
  if [[ -n "${iface:-}" ]]; then
    say "Link counters after:"
    ip -s link show dev "$iface" 2>/dev/null || true
  fi
}

main() {
  parse_args "$@"
say "Collecting diagnostics..."
  # AP2 Readiness summary
  say "AP2 readiness:"
  # PTP firewall / listeners
  if [[ -x "$(dirname "$0")/network-preflight-airplay2" ]]; then
    if "$(dirname "$0")/network-preflight-airplay2" >/dev/null 2>&1; then
      echo " - PTP: OPEN (UDP 319/320)"
    else
      echo " - PTP: BLOCKED (UDP 319/320)"; fi
  fi
  # ALSA preflight for boundary open
  if [[ -x "$(dirname "$0")/preflight-alsa" ]]; then
    if "$(dirname "$0")/preflight-alsa" >/dev/null 2>&1; then
      echo " - ALSA sink: OPEN 44.1k"
    else
      echo " - ALSA sink: FAILED (boundary not 44.1k)"; fi
  fi
  # TXT identity
  if [[ -x "$(dirname "$0")/verify-airplay-identity" ]]; then
    if out=$("$(dirname "$0")/verify-airplay-identity" --wait 1 2>/dev/null); then
      pklen=$(echo "$out" | awk -F'len=' '{print $2}' | tr -dc '0-9')
      echo " - TXT: deviceid OK, pk length=${pklen:-unknown}"
    else
      echo " - TXT: INVALID (missing pk/deviceid)"; fi
  fi
  local ver build soxr
  if command -v shairport-sync >/dev/null 2>&1; then
    ver=$(shairport-sync -V 2>&1 | head -1)
    soxr=$(shairport-sync -V 2>&1 | grep -q soxr && echo yes || echo no)
    say "shairport-sync: $ver (soxr=$soxr)"
  else
    err "shairport-sync not found"
  fi

  say "Service status:"
  systemctl is-active --quiet shairport-sync && echo "active" || echo "inactive"
  systemctl is-enabled --quiet shairport-sync && echo "enabled" || echo "disabled"

  say "Config excerpts:"
  diag_stats=$(awk 'BEGIN{IGNORECASE=1}
    /^diagnostics[[:space:]]*=/{insec=1}
    insec && /statistics[[:space:]]*=/ {match($0,/"[^"]+"/); if(RSTART>0){v=substr($0,RSTART+1,RLENGTH-2); print v; exit}}
    insec && /^};/ {insec=0}
  ' "$CONF" 2>/dev/null || true)
  gen_stats=$(awk 'BEGIN{IGNORECASE=1}
    /^general[[:space:]]*=/{insec=1}
    insec && /statistics[[:space:]]*=/ {match($0,/"[^"]+"/); if(RSTART>0){v=substr($0,RSTART+1,RLENGTH-2); print v; exit}}
    insec && /^};/ {insec=0}
  ' "$CONF" 2>/dev/null || true)
  echo "[general] interface=$(iface_from_conf || echo unset) diagnostics.statistics=${diag_stats:-unset} general.statistics=${gen_stats:-unset}"
  echo "[alsa] device=$(device_from_conf || echo unset)"

  say "AP2/RAOP identity check:"
  if [[ -x "$(dirname "$0")/verify-airplay-identity" ]]; then
    if ! "$(dirname "$0")/verify-airplay-identity"; then
      warn "Identity check failed; see above"
      say "Recent _airplay._tcp TXT dump:"
      avahi-browse -rt _airplay._tcp 2>/dev/null | sed -n '1,120p' || true
      say "Recent _raop._tcp TXT dump:"
      avahi-browse -rt _raop._tcp 2>/dev/null | sed -n '1,120p' || true
    fi
  else
    warn "verify-airplay-identity not executable"
  fi

  say "Recent Shairport logs (underruns/overruns/errors):"
  if command -v rg >/dev/null 2>&1; then
    journalctl -u shairport-sync -n 200 --no-pager 2>/dev/null | \
      rg -i "underrun|overrun|xruns|buffer|latenc|sync error|can not be set|error" -n || echo "(no notable messages)"
  else
    journalctl -u shairport-sync -n 200 --no-pager 2>/dev/null | \
      grep -Ei "underrun|overrun|xruns|buffer|latenc|sync error|can not be set|error" || echo "(no notable messages)"
  fi

  say "ALSA devices:"
  aplay -l 2>/dev/null || true
  local dev
  dev=$(device_from_conf || true)
  if [[ -n "$dev" ]]; then
  say "Testing if configured device opens at 44.1k (exclusive hw preferred):"
  if [[ -x "$(dirname "$0")/alsa-probe" && "$dev" == hw:* ]]; then
    if "$(dirname "$0")/alsa-probe" --validate "$dev"; then echo "OK: $dev opened at 44.1k"; else warn "$dev did not open at 44.1k"; fi
  else
    if ! named_pcm_loaded "$dev"; then
      warn "Named PCM '$dev' not loaded by ALSA; ensure /etc/asound.conf includes /etc/asound.d/airplay_wyse.conf"
    else
      timeout 2 aplay -D "$dev" -r 44100 -f S16_LE -c 2 -t raw /dev/zero -q 2>/dev/null && \
        echo "OK: $dev opened (via plug) at 44.1k" || warn "$dev did not open at 44.1k"
    fi
  fi
  if device_is_dmix_or_default "$dev"; then
    warn "Configured PCM appears to resolve to dmix/default. This typically forces 48 kHz. Select a raw hw:<card>,<dev> sink."
  fi
  fi

  say "Shairport statistics (Output FPS):"
  print_sink_rate_status

  if [[ -n "$dev" && "$dev" == hw:* ]]; then
    local hwp
    hwp=$(active_hw_params "$dev" || true)
    if [[ -n "$hwp" && -f "$hwp" ]]; then
      say "Active hw_params for $dev:"
      awk '/^(rate|format|period_size):/{print}' "$hwp" 2>/dev/null || true
      echo "(source: $hwp)"
    fi
  else
    if [[ -n "$dev" ]]; then
      say "Configured PCM is a named/plug device — boundary accepts 44.1k; underlying hw rate may differ."
    fi
  fi

  local iface
  iface="$(iface_guess)"
  show_iface_details "$iface"
  show_wifi_jitter "$iface"
  show_nqptp_status
  show_shairport_sched

  say "Done. Likely causes and hints:"
  echo "- If logs show underruns/overruns: improve Wi‑Fi stability (powersave/placement) or prefer Ethernet."
  echo "- If Output FPS ~47xxx or device resolves to dmix/default: switch to a 44.1k-capable hw:<card>,<dev> sink or attach a USB DAC."
  echo "- If CPU% is high and soxr is used, consider reducing other load; Wyse 5070 usually handles it fine."
  echo "- If nqptp is frequently unlocking or large offsets appear, check LAN stability and any VM/clock virtualization."

  # Optional live capture
  if [[ -n "${LIVE_DUR:-}" ]]; then
    local secs
    secs=$(duration_to_seconds "$LIVE_DUR")
    [[ "$secs" =~ ^[0-9]+$ ]] || { warn "invalid --live duration '$LIVE_DUR'"; return 0; }
    live_capture "$secs"
  fi
}

main "$@"
