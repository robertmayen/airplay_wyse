#!/usr/bin/env bash
set -euo pipefail

# Resolve dirs relative to this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
STATE_DIR="/var/lib/airplay_wyse"

# Read-only viewer: prints last-health.json if available and augments with quick probes

echo "=== AirPlay Wyse Health ==="

if [[ -f "$STATE_DIR/last-health.json" ]]; then
  if command -v jq >/dev/null 2>&1; then
    jq . "$STATE_DIR/last-health.json" 2>/dev/null || cat "$STATE_DIR/last-health.json"
  else
    cat "$STATE_DIR/last-health.json"
  fi
else
  echo "No last-health.json present"
fi

echo
echo "--- Runtime probes ---"
if command -v shairport-sync >/dev/null 2>&1; then
  ver_line=$(shairport-sync -V 2>&1 | head -1)
  echo "shairport: $ver_line"
  if echo "$ver_line" | grep -q "AirPlay2"; then
    echo "ap2: yes"
  else
    echo "ap2: no"
  fi
fi
if systemctl list-unit-files --type=service --no-legend 2>/dev/null | awk '{print $1}' | grep -qx "nqptp.service"; then
  systemctl is-active --quiet nqptp 2>/dev/null && echo "nqptp: active" || echo "nqptp: inactive"
fi
if command -v avahi-browse >/dev/null 2>&1; then
  if timeout 5 avahi-browse -rt _airplay._tcp 2>/dev/null | grep -q "_airplay._tcp"; then
    echo "mdns: _airplay visible"
  else
    if timeout 5 avahi-browse -rt _raop._tcp 2>/dev/null | grep -q "_raop._tcp"; then
      echo "mdns: _airplay not visible; _raop visible"
    else
      echo "mdns: neither _airplay nor _raop visible"
    fi
  fi
fi

exit 0
