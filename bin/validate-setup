#!/usr/bin/env bash
set -euo pipefail

# Validation and auto-remediation script for common AirPlay Wyse setup issues

REPO_DIR="/opt/airplay_wyse"
STATE_DIR="/var/lib/airplay_wyse"
RUN_DIR="/run/airplay"

log() { echo "$(date --iso-8601=seconds) [validate-setup] $*"; }
warn() { log "WARN: $*"; }
error() { log "ERROR: $*"; }

pe_exec() {
  # Secure privilege escalation via wrapper
  sudo /usr/local/sbin/airplay-sd-run "$@"
}

check_user_setup() {
  log "Checking airplay user setup..."
  
  # Check if airplay user exists
  if ! id -u airplay >/dev/null 2>&1; then
    error "airplay user does not exist"
    return 1
  fi
  
  # Check if airplay user is in audio group
  if ! groups airplay | grep -q '\baudio\b'; then
    warn "airplay user not in audio group"
    return 1
  fi
  
  # Check if airplay user is NOT in sudo group (security)
  if groups airplay | grep -q '\bsudo\b'; then
    warn "airplay user is in sudo group (security risk)"
    return 1
  fi
  
  log "✓ airplay user setup is correct"
  return 0
}

check_sudoers_config() {
  log "Checking sudoers configuration..."
  
  local sfile="/etc/sudoers.d/airplay-wyse"
  if [[ ! -f "$sfile" ]]; then
    error "sudoers file $sfile does not exist"
    return 1
  fi
  
  # Check file permissions
  local perms
  perms=$(stat -c "%a" "$sfile")
  if [[ "$perms" != "440" ]]; then
    warn "sudoers file has incorrect permissions: $perms (should be 440)"
    return 1
  fi
  
  # Check content
  if ! grep -q "airplay ALL=(root) NOPASSWD: /usr/local/sbin/airplay-sd-run" "$sfile"; then
    error "sudoers file missing NOPASSWD rule"
    return 1
  fi
  
  # Validate sudoers syntax
  if ! sudo visudo -c >/dev/null 2>&1; then
    error "sudoers configuration is invalid"
    return 1
  fi
  
  log "✓ sudoers configuration is correct"
  return 0
}

check_wrapper() {
  log "Checking privilege escalation wrapper..."
  
  local wrapper="/usr/local/sbin/airplay-sd-run"
  if [[ ! -f "$wrapper" ]]; then
    error "wrapper $wrapper does not exist"
    return 1
  fi
  
  # Check permissions
  local perms owner
  perms=$(stat -c "%a" "$wrapper")
  owner=$(stat -c "%U:%G" "$wrapper")
  
  if [[ "$perms" != "755" ]]; then
    warn "wrapper has incorrect permissions: $perms (should be 755)"
    return 1
  fi
  
  if [[ "$owner" != "root:root" ]]; then
    warn "wrapper has incorrect ownership: $owner (should be root:root)"
    return 1
  fi
  
  log "✓ privilege escalation wrapper is correct"
  return 0
}

check_runtime_dirs() {
  log "Checking runtime directories..."
  
  local dirs=(
    "$STATE_DIR"
    "$RUN_DIR"
    "$RUN_DIR/tmp"
  )
  
  for dir in "${dirs[@]}"; do
    if [[ ! -d "$dir" ]]; then
      warn "directory $dir does not exist"
      return 1
    fi
    
    if [[ ! -w "$dir" ]]; then
      warn "directory $dir is not writable by airplay user"
      return 1
    fi
  done
  
  log "✓ runtime directories are correct"
  return 0
}

check_systemd_units() {
  log "Checking systemd units..."
  
  local units=(
    "reconcile.service"
    "reconcile.timer"
    "converge.service"
  )
  
  for unit in "${units[@]}"; do
    if ! systemctl list-unit-files --type=service,timer --no-legend 2>/dev/null | awk '{print $1}' | grep -qx "$unit"; then
      warn "systemd unit $unit is not installed"
      return 1
    fi
  done
  
  # Check if reconcile.timer is enabled
  if ! systemctl is-enabled --quiet reconcile.timer 2>/dev/null; then
    warn "reconcile.timer is not enabled"
    return 1
  fi
  
  log "✓ systemd units are correct"
  return 0
}

check_build_dependencies() {
  log "Checking build dependencies for AirPlay 2..."
  
  local missing_packages=()
  local required_packages=(
    "build-essential"
    "git"
    "autoconf"
    "automake"
    "libtool"
    "pkg-config"
    "xmltoman"
    "libpopt-dev"
    "libconfig-dev"
    "libasound2-dev"
    "libavahi-client-dev"
    "libmbedtls-dev"
    "libsoxr-dev"
    "vim-common"
    "libplist-dev"
    "libsodium-dev"
    "libgcrypt-dev"
    "libavutil-dev"
    "libavcodec-dev"
    "libavformat-dev"
    "uuid-dev"
  )
  
  for package in "${required_packages[@]}"; do
    if ! dpkg -l "$package" >/dev/null 2>&1; then
      missing_packages+=("$package")
    fi
  done
  
  if [[ ${#missing_packages[@]} -gt 0 ]]; then
    warn "Missing build dependencies: ${missing_packages[*]}"
    return 1
  fi
  
  # Check for xxd specifically (critical for AirPlay 2)
  if ! command -v xxd >/dev/null 2>&1; then
    warn "xxd command not found (needed for AirPlay 2)"
    return 1
  fi
  
  log "✓ build dependencies are satisfied"
  return 0
}

fix_user_setup() {
  log "Fixing airplay user setup..."
  
  # Remove from sudo group if present
  if groups airplay | grep -q '\bsudo\b'; then
    pe_exec /usr/sbin/deluser airplay sudo
    log "removed airplay from sudo group"
  fi
  
  # Ensure in audio group
  if ! groups airplay | grep -q '\baudio\b'; then
    pe_exec /usr/sbin/usermod -aG audio airplay
    log "added airplay to audio group"
  fi
}

fix_runtime_dirs() {
  log "Fixing runtime directories..."
  
  # Create missing directories
  pe_exec /usr/bin/install -d -m 0755 "$STATE_DIR"
  pe_exec /usr/bin/install -d -m 0755 "$RUN_DIR"
  pe_exec /usr/bin/install -d -m 0755 "$RUN_DIR/tmp"
  
  # Fix ownership
  pe_exec /usr/bin/chown -R airplay:airplay "$STATE_DIR"
  pe_exec /usr/bin/chown -R airplay:airplay "$RUN_DIR"
  
  log "runtime directories fixed"
}

fix_sudoers_config() {
  log "Fixing sudoers configuration..."
  
  local sfile="/etc/sudoers.d/airplay-wyse"
  local tmpfile
  tmpfile=$(mktemp)
  
  {
    echo 'Defaults:airplay !requiretty'
    echo 'airplay ALL=(root) NOPASSWD: /usr/local/sbin/airplay-sd-run'
  } > "$tmpfile"
  
  pe_exec /usr/bin/install -m 0440 "$tmpfile" "$sfile"
  rm -f "$tmpfile"
  
  # Validate
  if ! sudo visudo -c >/dev/null 2>&1; then
    error "failed to fix sudoers configuration"
    return 1
  fi
  
  log "sudoers configuration fixed"
}

fix_build_dependencies() {
  log "Fixing build dependencies..."
  
  local missing_packages=()
  local required_packages=(
    "build-essential"
    "git"
    "autoconf"
    "automake"
    "libtool"
    "pkg-config"
    "xmltoman"
    "libpopt-dev"
    "libconfig-dev"
    "libasound2-dev"
    "libavahi-client-dev"
    "libmbedtls-dev"
    "libsoxr-dev"
    "vim-common"
    "libplist-dev"
    "libsodium-dev"
    "libgcrypt-dev"
    "libavutil-dev"
    "libavcodec-dev"
    "libavformat-dev"
    "uuid-dev"
  )
  
  for package in "${required_packages[@]}"; do
    if ! dpkg -l "$package" >/dev/null 2>&1; then
      missing_packages+=("$package")
    fi
  done
  
  if [[ ${#missing_packages[@]} -gt 0 ]]; then
    log "Installing missing build dependencies: ${missing_packages[*]}"
    pe_exec /usr/bin/apt-get update
    pe_exec /usr/bin/apt-get install -y "${missing_packages[@]}"
  fi
  
  log "build dependencies fixed"
}

main() {
  log "Starting AirPlay Wyse setup validation..."
  
  local issues=0
  local fixes_needed=()
  
  # Check all components
  if ! check_user_setup; then
    issues=$((issues + 1))
    fixes_needed+=("user_setup")
  fi
  
  if ! check_sudoers_config; then
    issues=$((issues + 1))
    fixes_needed+=("sudoers_config")
  fi
  
  if ! check_wrapper; then
    issues=$((issues + 1))
    # Wrapper issues require manual intervention (bootstrap)
  fi
  
  if ! check_runtime_dirs; then
    issues=$((issues + 1))
    fixes_needed+=("runtime_dirs")
  fi
  
  if ! check_systemd_units; then
    issues=$((issues + 1))
    # Unit issues require manual intervention (bootstrap)
  fi
  
  if ! check_build_dependencies; then
    issues=$((issues + 1))
    fixes_needed+=("build_dependencies")
  fi
  
  if [[ $issues -eq 0 ]]; then
    log "✓ All setup validation checks passed"
    return 0
  fi
  
  log "Found $issues setup issues"
  
  # Apply fixes where possible
  for fix in "${fixes_needed[@]}"; do
    case "$fix" in
      "user_setup")
        fix_user_setup
        ;;
      "sudoers_config")
        fix_sudoers_config
        ;;
      "runtime_dirs")
        fix_runtime_dirs
        ;;
      "build_dependencies")
        fix_build_dependencies
        ;;
    esac
  done
  
  # Re-check after fixes
  local remaining_issues=0
  
  if ! check_user_setup; then remaining_issues=$((remaining_issues + 1)); fi
  if ! check_sudoers_config; then remaining_issues=$((remaining_issues + 1)); fi
  if ! check_wrapper; then remaining_issues=$((remaining_issues + 1)); fi
  if ! check_runtime_dirs; then remaining_issues=$((remaining_issues + 1)); fi
  if ! check_systemd_units; then remaining_issues=$((remaining_issues + 1)); fi
  if ! check_build_dependencies; then remaining_issues=$((remaining_issues + 1)); fi
  
  if [[ $remaining_issues -eq 0 ]]; then
    log "✓ All setup issues have been resolved"
    return 0
  else
    log "⚠ $remaining_issues issues remain (may require manual intervention)"
    return 1
  fi
}

main "$@"
