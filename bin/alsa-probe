#!/usr/bin/env bash
set -euo pipefail

# alsa-probe: resolve an ALSA output device string hw:<card>,<device>
# Preference: inventory overrides -> USB DACs -> first available playback
# Exits non-zero if no playable device can be determined.

# Resolve repo dir relative to this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

# Optional inventory
host_short() { hostname -s 2>/dev/null || hostname; }
INV="$REPO_DIR/inventory/hosts/$(host_short).yml"

# Minimal YAML reader supporting either:
#  - flat keys:   "alsa.vendor_id: 0x08bb"
#  - nested keys: "alsa:\n  vendor_id: 0x08bb"
# It is intentionally simple and only handles the small subset we need.
yaml_get() {
  local key="$1" val=""
  [[ -f "$INV" ]] || { echo ""; return 0; }

  # If requesting alsa.<field>, first try nested under an `alsa:` block
  if [[ "$key" == alsa.* ]]; then
    local subkey="${key#alsa.}"
    val=$(awk -v want="$subkey" '
      function strip(s) { gsub(/^[ \t]+|[ \t]+$/, "", s); return s }
      function unq(s) {
        # remove surrounding double quotes
        gsub(/^\"|\"$/, "", s)
        # remove surrounding single quotes (build pattern to avoid quoting issues)
        q = sprintf("%c", 39)
        gsub("^" q "|" q "$", "", s)
        return s
      }
      function unquote(s) { gsub(/^"|"$/, "", s); gsub(/^'[1m[0m'|'$/, "", s); return s }
      BEGIN { insec=0; sec_indent=-1 }
      {
        line=$0
        sub(/[ \t]*#.*/, "", line)           # remove comments
        if (line ~ /^[ \t]*$/) next           # skip empty
      }
      # enter alsa: section and record its indent
      match(line, /^([ \t]*)alsa:[ \t]*$/, m) {
        insec=1; sec_indent=length(m[1]); next
      }
      {
        if (insec) {
          match(line, /^([ \t]*)/, mi)
          indent=length(mi[1])
          if (indent <= sec_indent) { insec=0 }
        }
      }
      insec && match(line, /^[ \t]*([A-Za-z0-9_]+)[ \t]*:[ \t]*(.*)$/, kv) {
        k=kv[1]; v=kv[2]
        v=strip(v); v=unq(v)
        if (tolower(k) == tolower(want)) { print v; exit }
      }
    ' "$INV" ) || true
    if [[ -n "$val" ]]; then echo "$val"; return 0; fi
  fi

  # Fallback: flat key on a single line
  val=$(grep -E "^${key}:[[:space:]]" "$INV" 2>/dev/null | sed -E "s/^${key}:[[:space:]]*//" | sed -E 's/[[:space:]]+#.*$//' | tr -d '"') || true
  echo "${val}"
}

vid=$(yaml_get 'alsa.vendor_id' || true)
pid=$(yaml_get 'alsa.product_id' || true)
devnum=$(yaml_get 'alsa.device_num' || true)
devnum=${devnum:-0}

# If explicit hw:card,dev given (rare), accept it
exp=$(yaml_get 'alsa.device' || true)
if [[ -n "${exp:-}" ]]; then
  echo "$exp"; exit 0
fi

# Helper: first playback device number for a card index
first_playback_dev() {
  local c="$1" d
  for d in /proc/asound/card"$c"/pcm*p; do
    [[ -e "$d" ]] || continue
    d=$(basename "$d")
    echo "${d#pcm}" | tr -d 'p'
    return 0
  done
  return 1
}

# Prefer USB matching VID:PID
if [[ -n "${vid:-}" && -n "${pid:-}" ]]; then
  for cpath in /sys/class/sound/card*/device; do
    [[ -d "$cpath" ]] || continue
    local up
    up="$(dirname "$cpath")/.."
    if [[ -f "$up/idVendor" && -f "$up/idProduct" ]]; then
      local V P
      V=$(cat "$up/idVendor")
      P=$(cat "$up/idProduct")
      if [[ "0x$V" == "$vid" && "0x$P" == "$pid" ]]; then
        card=$(basename "$(dirname "$cpath")"); card=${card#card}
        if p=$(first_playback_dev "$card"); then
          echo "hw:${card},${devnum:-$p}"; exit 0
        fi
      fi
    fi
  done
fi

# Next: any USB card (detected via sysfs idVendor/idProduct)
for cdir in /sys/class/sound/card*; do
  [[ -d "$cdir" ]] || continue
  up="$(dirname "$cdir")/device/.."
  if [[ -f "$up/idVendor" && -f "$up/idProduct" ]]; then
    card=$(basename "$cdir"); card=${card#card}
    if p=$(first_playback_dev "$card"); then
      # USB DACs typically support 44.1 kHz natively; prefer the raw hw: device.
      # If your USB DAC rejects 44.1 kHz, switch to plughw via ./bin/apply.
      echo "hw:${card},${devnum:-$p}"; exit 0
    fi
  fi
done

# Fallback: first playback on any non-USB card.
# Many onboard HDA codecs expose 48 kHz-only sinks on the raw hw: device and
# will reject 44.1 kHz. Use ALSA's plug to enable transparent resampling.
for cdir in /sys/class/sound/card*; do
  [[ -d "$cdir" ]] || continue
  card=$(basename "$cdir"); card=${card#card}
  if p=$(first_playback_dev "$card"); then
    echo "plughw:${card},${devnum:-$p}"; exit 0
  fi
done

exit 1
