#!/usr/bin/env bash
set -euo pipefail

# pw-policy-ensure: Idempotently ensure PipeWire rate policy for AirPlay Wyse.
# - AUTO by default: set allowed rates; do NOT force a fixed graph rate.
# - Optional: PW_FORCE_RATE=44100|48000|88200|96000 pins the graph rate (documented opt-in).
# - If PipeWire is absent, exit 0 (no-op) so ALSA fallback proceeds cleanly.
# - Writes /etc/pipewire/pipewire.conf.d/90-airplay_wyse.conf atomically when content diverges.
# - Prints a compact JSON summary to stdout.

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
CONF_DIR="/etc/pipewire/pipewire.conf.d"
CONF_FILE="$CONF_DIR/90-airplay_wyse.conf"
STATE_DIR="/var/lib/airplay_wyse"
STATE_JSON="$STATE_DIR/pw-policy.json"

ALLOWED_RATES=(44100 48000 88200 96000)
FORCE_RATE="${PW_FORCE_RATE:-}"

log() { echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] [pw-policy] $*"; }
die() { echo "[pw-policy] ERROR: $*" >&2; exit 1; }

have_cmd() { command -v "$1" >/dev/null 2>&1; }

pipewire_present() {
  # Consider present if any of: pw-cli, pw-dump, pipewire binary, or /etc/pipewire exists
  if have_cmd pw-cli || have_cmd pw-dump || have_cmd pipewire; then return 0; fi
  [[ -d /etc/pipewire ]] && return 0
  return 1
}

ensure_dir() { install -d -m 0755 "$1"; }

render_conf() {
  local tmp="$1" force="$2"
  {
    echo "# Managed by AirPlay Wyse (bin/pw-policy-ensure)"
    echo "# Allowed rates are advisory; do not force unless PW_FORCE_RATE is set."
    echo "context.properties = {"
    printf "  default.clock.allowed-rates = ["
    local i first=1
    for i in "${ALLOWED_RATES[@]}"; do
      if [[ $first -eq 1 ]]; then printf " %s" "$i"; first=0; else printf " %s" "$i"; fi
    done
    echo " ]"
    if [[ -n "$force" ]]; then
      echo "  default.clock.force-rate = $force"
    fi
    echo "}"
  } >"$tmp"
}

json_escape() { printf '%s' "$1" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g'; }

content_differs() {
  local desired tmp
  tmp=$(mktemp)
  render_conf "$tmp" "$FORCE_RATE"
  if [[ ! -f "$CONF_FILE" ]]; then rm -f "$tmp"; return 0; fi
  if ! cmp -s "$tmp" "$CONF_FILE"; then rm -f "$tmp"; return 0; fi
  rm -f "$tmp"
  return 1
}

main() {
  local present changed=0
  if ! pipewire_present; then
    log "PipeWire not detected; policy no-op"
    printf '{"present":0,"changed":0,"force_rate":null}\n'
    return 0
  fi
  if [[ -n "$FORCE_RATE" ]]; then
    case "$FORCE_RATE" in
      44100|48000|88200|96000) : ;; 
      *) die "PW_FORCE_RATE must be one of 44100,48000,88200,96000" ;;
    esac
  fi

  ensure_dir "$CONF_DIR"
  ensure_dir "$STATE_DIR"
  if content_differs; then
    local tmp
    tmp=$(mktemp)
    render_conf "$tmp" "$FORCE_RATE"
    install -m 0644 "$tmp" "$CONF_FILE"
    rm -f "$tmp"
    changed=1
    log "wrote $CONF_FILE (allowed-rates=${ALLOWED_RATES[*]} force-rate=${FORCE_RATE:-auto})"
  else
    log "policy already in desired state"
  fi

  # Write state JSON (informational)
  local force_json
  force_json=$( [[ -n "$FORCE_RATE" ]] && echo "$FORCE_RATE" || echo "null")
  printf '{"present":1,"changed":%s,"force_rate":%s,"allowed_rates":[%s]}\n' \
    "$changed" "$force_json" "$(IFS=, ; echo "${ALLOWED_RATES[*]}")" | tee "$STATE_JSON" >/dev/null
}

main "$@"

