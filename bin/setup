#!/usr/bin/env bash
set -euo pipefail

# One-time setup for AirPlay Wyse (least-privilege model)
# - Installs shairport-sync (AirPlay 2) and nqptp
# - Installs hardened systemd override for shairport-sync
# - Writes /etc/shairport-sync.conf from a minimal template
# - Enables and starts nqptp + shairport-sync

# Resolve repo dir relative to this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
TEMPLATE_MIN="$REPO_DIR/cfg/shairport-sync.minimal.conf.tmpl"
TARGET_CONF="/etc/shairport-sync.conf"
SH_OVERRIDE_SRC="$REPO_DIR/systemd/overrides/shairport-sync.service.d/override.conf"
SH_OVERRIDE_DIR="/etc/systemd/system/shairport-sync.service.d"
SH_OVERRIDE_DEST="$SH_OVERRIDE_DIR/override.conf"
IDENTITY_UNIT_SRC="$REPO_DIR/systemd/airplay-wyse-identity.service"
IDENTITY_UNIT_DEST="/etc/systemd/system/airplay-wyse-identity.service"
POLICY_UNIT_SRC="$REPO_DIR/systemd/airplay-wyse-alsa-policy.service"
POLICY_UNIT_DEST="/etc/systemd/system/airplay-wyse-alsa-policy.service"
PW_UNIT_SRC="$REPO_DIR/systemd/airplay-wyse-pw-policy.service"
PW_UNIT_DEST="/etc/systemd/system/airplay-wyse-pw-policy.service"
KMODS_UNIT_SRC="$REPO_DIR/systemd/airplay-wyse-audio-kmods.service"
KMODS_UNIT_DEST="/etc/systemd/system/airplay-wyse-audio-kmods.service"
IDENTITY_LIBEXEC_DIR="/usr/local/libexec/airplay_wyse"
IDENTITY_BIN_SRC="$REPO_DIR/bin/identity-ensure"
IDENTITY_LIB_SRC="$REPO_DIR/bin/lib.sh"
POLICY_BIN_SRC="$REPO_DIR/bin/alsa-policy-ensure"
DEFAULT_ENV_FILE="/etc/default/airplay_wyse"
LIB_SH="$REPO_DIR/bin/lib.sh"
DEFAULTS_FILE=${DEFAULTS_FILE:-/etc/default/airplay_wyse}

log() { echo "$(ts) [setup] $*"; }
die() { echo "[setup] ERROR: $*" >&2; exit 1; }

require_root() { [[ "$(id -u)" -eq 0 ]] || die "must be run as root"; }

ensure_pkg() {
  local pkg="$1"
  if ! dpkg -s "$pkg" >/dev/null 2>&1; then
    log "installing package: $pkg"
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y "$pkg"
  fi
}

have_airplay2() {
  if command -v shairport-sync >/dev/null 2>&1; then
    shairport-sync -V 2>&1 | grep -q "AirPlay2" && return 0 || return 1
  fi
  return 1
}

install_build_deps_common() {
  apt-get update -y
  DEBIAN_FRONTEND=noninteractive apt-get install -y \
    build-essential git autoconf automake libtool pkg-config
}

install_build_deps_shairport() {
  DEBIAN_FRONTEND=noninteractive apt-get install -y \
    libconfig-dev libpopt-dev libasound2-dev libavahi-client-dev \
    libssl-dev libsoxr-dev libplist-dev libsodium-dev libgcrypt20-dev \
    libavutil-dev libavcodec-dev libavformat-dev libswresample-dev \
    uuid-dev vim-common
}

install_build_deps_nqptp() {
  # Provided by common deps; retained for clarity and future additions
  :
}

build_from_source() {
  local repo_url="$1" name="$2" cfg_args="$3"
  install_build_deps_common
  local work
  work=$(mktemp -d)
  trap 'rm -rf "$work"' RETURN
  log "building $name from source in $work"
  (cd "$work" && git clone "$repo_url" "$name")
  (cd "$work/$name" && autoreconf -fi && ./configure $cfg_args && make -j"$(nproc)" && make install)
}

ensure_nqptp() {
  if systemctl list-unit-files --type=service --no-legend 2>/dev/null | awk '{print $1}' | grep -qx "nqptp.service"; then
    log "nqptp already present"
    return 0
  fi
  log "installing nqptp (package or source)"
  if DEBIAN_FRONTEND=noninteractive apt-get install -y nqptp >/dev/null 2>&1; then
    log "nqptp package installed"
  else
    log "nqptp package unavailable; building from source"
    install_build_deps_nqptp
    build_from_source "https://github.com/mikebrady/nqptp.git" "nqptp" "--with-systemd-startup"
  fi
  systemctl daemon-reload
  systemctl enable --now nqptp.service
}

ensure_shairport_ap2() {
  if have_airplay2; then
    log "shairport-sync with AirPlay 2 already installed"
    return 0
  fi
  log "installing shairport-sync (package or source with AirPlay 2)"
  if DEBIAN_FRONTEND=noninteractive apt-get install -y shairport-sync >/dev/null 2>&1; then
    if have_airplay2; then
      log "shairport-sync package provides AirPlay 2"
      return 0
    else
      log "package shairport-sync lacks AirPlay 2; building from source"
    fi
  else
    log "shairport-sync package unavailable; building from source"
  fi
  install_build_deps_shairport
  build_from_source "https://github.com/mikebrady/shairport-sync.git" "shairport-sync" \
    "--sysconfdir=/etc --with-alsa --with-avahi --with-ssl=openssl --with-soxr --with-airplay-2 --with-systemd --with-systemdsystemunitdir=/usr/lib/systemd/system"
}

ensure_execstart_for_local_build() {
  # If /usr/local/bin/shairport-sync exists and has AirPlay2, ensure ExecStart points to it
  if [[ -x "/usr/local/bin/shairport-sync" ]] && /usr/local/bin/shairport-sync -V 2>&1 | grep -q "AirPlay2"; then
    local dropin_dir="/etc/systemd/system/shairport-sync.service.d"
    install -d -m 0755 "$dropin_dir"
    cat >"$dropin_dir/execstart.conf" <<'EOF'
[Service]
ExecStart=
ExecStart=/usr/local/bin/shairport-sync --log-to-syslog
EOF
    systemctl daemon-reload
    log "configured ExecStart override to use /usr/local/bin/shairport-sync"
  fi
}

render_conf() { render_shairport_conf "$TEMPLATE_MIN" "$TARGET_CONF" "$@"; }

install_override() {
  if [[ -f "$SH_OVERRIDE_SRC" ]]; then
    install -d -m 0755 "$SH_OVERRIDE_DIR"
    install -m 0644 "$SH_OVERRIDE_SRC" "$SH_OVERRIDE_DEST"
    systemctl daemon-reload
  fi
}

install_identity_unit() {
  if [[ -f "$IDENTITY_UNIT_SRC" ]]; then
    install -m 0644 "$IDENTITY_UNIT_SRC" "$IDENTITY_UNIT_DEST"
    systemctl daemon-reload
  fi
}

install_policy_unit() {
  if [[ -f "$POLICY_UNIT_SRC" ]]; then
    install -m 0644 "$POLICY_UNIT_SRC" "$POLICY_UNIT_DEST"
    systemctl daemon-reload
  fi
}

install_kmods_unit() {
  if [[ -f "$KMODS_UNIT_SRC" ]]; then
    install -m 0644 "$KMODS_UNIT_SRC" "$KMODS_UNIT_DEST"
    systemctl daemon-reload
  fi
}

install_identity_program() {
  install -d -m 0755 "$IDENTITY_LIBEXEC_DIR"
  install -m 0755 "$IDENTITY_BIN_SRC" "$IDENTITY_LIBEXEC_DIR/identity-ensure"
  install -m 0644 "$IDENTITY_LIB_SRC" "$IDENTITY_LIBEXEC_DIR/lib.sh"
  if [[ -f "$POLICY_BIN_SRC" ]]; then
    install -m 0755 "$POLICY_BIN_SRC" "$IDENTITY_LIBEXEC_DIR/alsa-policy-ensure"
  fi
  if [[ -f "$REPO_DIR/bin/pw-policy-ensure" ]]; then
    install -m 0755 "$REPO_DIR/bin/pw-policy-ensure" "$IDENTITY_LIBEXEC_DIR/pw-policy-ensure"
  fi
  # Optional environment override file for interface selection, etc.
  if [[ ! -f "$DEFAULT_ENV_FILE" ]]; then
    cat >"$DEFAULT_ENV_FILE" <<'EOF'
# airplay_wyse defaults (sourced by identity-ensure)
# Set AIRPLAY_WYSE_IFACE=eth0 (for example) to force the primary interface.
# Set AIRPLAY_WYSE_INSTANCE_OFFSET=1 if running multiple shairport instances.
EOF
  fi
}

main() {
  require_root
  command -v systemctl >/dev/null 2>&1 || die "systemd is required"
  # shellcheck disable=SC1091
  [[ -f "$LIB_SH" ]] && source "$LIB_SH" || die "missing lib: $LIB_SH"
  # shellcheck disable=SC1091
  [[ -f "$DEFAULTS_FILE" ]] && source "$DEFAULTS_FILE" || true

  local name device mixer iface
  name="${AIRPLAY_NAME:-}"
  mixer="${ALSA_MIXER:-}"
  iface="${AVAHI_IFACE:-}"
  local hwaddr="${HW_ADDR:-}"

  # Ensure ALSA policy and default device chain exist; prefer ALSA default in Shairport
  local policy_json anchor interp output_rate soxr_required
  if [[ -x "$REPO_DIR/bin/alsa-policy-ensure" ]]; then
    policy_json=$("$REPO_DIR/bin/alsa-policy-ensure")
    anchor=$(printf '%s' "$policy_json" | awk -F'[,:}]' '/"anchor_hz"/{for(i=1;i<=NF;i++) if ($i ~ /"anchor_hz"/) {print $(i+1); exit}}' | tr -dc '0-9')
    soxr_required=$(printf '%s' "$policy_json" | awk -F'[,:}]' '/"soxr_required"/{for(i=1;i<=NF;i++) if ($i ~ /"soxr_required"/) {print $(i+1); exit}}' | tr -dc '0-9')
    # Default to using ALSA's default device which points to our anchored dmix
    device="default"
    # Only set output_rate when hardware-anchored to 48k
    if [[ "${soxr_required:-0}" -eq 1 ]]; then
      output_rate="${anchor:-}"
      if shairport-sync -V 2>&1 | grep -q soxr; then
        interp="soxr"
      else
        die "hardware anchored at 48k but shairport-sync lacks libsoxr; rebuild with --with-soxr or install proper package"
      fi
    else
      # 44.1-anchored; interpolation optional; no output_rate
      output_rate=""
      if shairport-sync -V 2>&1 | grep -q soxr; then
        interp="soxr"
      else
        interp=""
      fi
    fi
  else
    # Fallback to previous behavior
    if [[ -n "${ALSA_DEVICE:-}" ]]; then
      device="$ALSA_DEVICE"
    elif [[ -x "$REPO_DIR/bin/alsa-probe" ]]; then
      device="$($REPO_DIR/bin/alsa-probe || true)"; device="${device:-hw:0,0}"
    else
      device="hw:0,0"
    fi
    output_rate=""; interp=""
  fi

  log "ensuring AirPlay 2 stack (shairport-sync + nqptp)"
  ensure_pkg jq || true
  ensure_pkg alsa-utils || true
  ensure_nqptp
  ensure_shairport_ap2

  log "installing shairport-sync override (hardened + nqptp ordering)"
  install_override
  ensure_execstart_for_local_build

  log "installing identity program + unit"
  install_identity_program
  install_identity_unit
  install_kmods_unit
  install_policy_unit
  if [[ -f "$REPO_DIR/bin/health-probe" ]]; then
    install -m 0755 "$REPO_DIR/bin/health-probe" "$IDENTITY_LIBEXEC_DIR/health-probe"
  fi
  if [[ -f "$PW_UNIT_SRC" ]]; then
    install -m 0644 "$PW_UNIT_SRC" "$PW_UNIT_DEST"
    systemctl daemon-reload
  fi
  if [[ -f "$PW_UNIT_SRC" ]]; then
    install -m 0644 "$PW_UNIT_SRC" "$PW_UNIT_DEST"
    systemctl daemon-reload
  fi

  # Resolve defaults for device name (unique default). hardware_address/interface are managed by identity-ensure
  local primary_if mac
  primary_if="${iface:-$(primary_iface || true)}"
  if [[ -z "$name" ]]; then
    mac=$(derive_hwaddr_from_iface "$primary_if" || true)
    name="$(default_airplay_name "${mac:-}")"
  fi

  log "writing $TARGET_CONF (name='$name', device='$device')"
  # identity-ensure will set interface and hardware_address at boot
  # Enable statistics if AIRPLAY_WYSE_DEBUG is set
  stats=""
  if [[ "${AIRPLAY_WYSE_DEBUG:-0}" == "1" ]]; then stats="yes"; fi
  render_conf "$name" "$device" "${mixer:-}" "" "" "" "${output_rate:-}" "${stats:-}" "${interp:-}"

  # Ensure identity is set immediately (and self-heal on clones)
  if [[ -x "$IDENTITY_LIBEXEC_DIR/identity-ensure" ]]; then
    "$IDENTITY_LIBEXEC_DIR/identity-ensure" || die "identity-ensure failed"
  else
    maybe_reset_identity "${mac:-}"
  fi

  log "enabling and starting services"
  systemctl enable --now nqptp.service || log "nqptp not present; skipping enable"
  systemctl enable airplay-wyse-audio-kmods.service || true
  systemctl enable airplay-wyse-alsa-policy.service || true
  systemctl enable airplay-wyse-pw-policy.service || true
  systemctl enable --now shairport-sync.service

  log "done"
}

main "$@"
